1. 테트로미노 동작 구현
회전 및 이동 로직 완성: 각 Tetromino 구현체에 대해 rotateRight, rotateLeft, moveLeft, moveRight, moveDown 메서드를 완성하세요. 이는 각 테트로미노가 게임 보드 내에서 어떻게 움직이고 회전할지 정의합니다.
테스트 케이스 작성: 각 테트로미노의 동작을 테스트하기 위한 테스트 케이스를 작성합니다. 이는 개발 초기 단계에서 버그를 발견하고 수정하는 데 도움이 됩니다.
2. Board 클래스 통합 및 게임 로직 개발
테트로미노와 보드 통합: Board 클래스에 테트로미노를 추가하고, 제거하는 로직을 구현합니다. 테트로미노가 게임 보드에 어떻게 배치되고, 줄이 완성되었을 때 이를 어떻게 처리할지 고려해야 합니다.
줄 삭제 로직 구현: 한 줄이 완성되었을 때, 그 줄을 삭제하고 위에 있는 줄들을 아래로 이동시키는 로직을 구현합니다.
게임 오버 조건 처리: 게임 오버 조건(새로운 테트로미노를 게임 보드의 상단에 배치할 수 없는 경우)을 감지하고 처리하는 로직을 추가합니다.
3. 사용자 인터페이스(UI) 개발
JavaFX를 사용한 UI 설계: 게임의 시작 화면, 게임 플레이 화면, 게임 오버 화면 등 사용자 인터페이스를 설계하고 구현합니다.
테트로미노와 보드 시각화: Board 클래스와 테트로미노의 현재 상태를 화면에 그리는 로직을 개발합니다. JavaFX의 Canvas나 Pane을 사용하여 테트로미노를 시각적으로 표현할 수 있습니다.
사용자 입력 처리: 사용자로부터의 입력(키보드 이벤트)을 받아 테트로미노를 회전하고 이동시키는 기능을 구현합니다.
4. 게임 루프 및 상태 관리
게임 루프 구현: 게임의 메인 루프를 구현하여, 게임 상태를 지속적으로 업데이트하고 화면에 반영합니다.
점수 계산 및 표시: 게임에서 점수를 계산하고, 이를 사용자 인터페이스에 표시하는 로직을 추가합니다.
5. 추가 기능 및 폴리싱
난이도 조절: 게임의 진행에 따라 난이도를 조절하는 기능(예: 시간이 지날수록 테트로미노가 더 빠르게 떨어지게 하는 등)을 추가합니다.
사운드 효과 및 음악: 게임에 사운드 효과와 배경 음악을 추가하여 사용자 경험을 향상시킵니다.
UI 및 게임플레이 폴리싱: 사용자 인터페이스와 게임 플레이를 보다 사용자 친화적으로 개선합니다.